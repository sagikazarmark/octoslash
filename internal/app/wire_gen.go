// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/wireinject/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"errors"
	"fmt"
	"github.com/google/go-github/v74/github"
	"github.com/sagikazarmark/go-github-fs"
	"github.com/sagikazarmark/octoslash"
	"io"
	"io/fs"
	"log/slog"
	"os"
)

// Injectors from wire.go:

func InitializeEventHandler(provider Provider, token Token, repo *github.Repository, localFS LocalFS) (octoslash.EventHandler, error) {
	client := NewClient(provider, token)
	lazyResult := NewFS(localFS, client, repo)
	appLazyResult := DefaultPolicyLoader(lazyResult)
	lazyResult2 := DefaultEntityLoader(lazyResult)
	logger := NewLogger(provider)
	lazyResult3 := DefaultAuthorizer(provider, appLazyResult, lazyResult2, logger)
	lazyResult4 := NewCommandProvider(provider, client, logger)
	lazyResult5 := DefaultCommandDispatcher(lazyResult3, lazyResult4)
	commandDispatcher, err := NewCommandDispatcher(provider, lazyResult5)
	if err != nil {
		return octoslash.EventHandler{}, err
	}
	eventHandler := octoslash.EventHandler{
		Dispatcher: commandDispatcher,
	}
	return eventHandler, nil
}

// wire.go:

type Provider any

type Token string

type LocalFS = fs.FS

// TODO: inject output
func NewLogger(provider Provider) *slog.Logger {
	switch p := provider.(type) {
	case interface{ NewLogger() *slog.Logger }:
		return p.NewLogger()

	case interface{ NewLogger(io.Writer) *slog.Logger }:
		return p.NewLogger(os.Stderr)

	default:
		return slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{Level: slog.LevelDebug}))
	}
}

func NewClient(provider Provider, token Token) *github.Client {
	switch p := provider.(type) {
	case interface{ NewClient() *github.Client }:
		return p.NewClient()

	case interface{ NewClient(string) *github.Client }:
		return p.NewClient(string(token))

	default:
		client := github.NewClient(nil)
		if token != "" {
			client = client.WithAuthToken(string(token))
		}

		return client
	}
}

func NewFS(localFS LocalFS, client *github.Client, repo *github.Repository) LazyResult[fs.FS] {
	return func() (fs.FS, error) {
		if localFS != nil {
			return localFS, nil
		}

		githubFS := githubfs.New(githubfs.WithClient(client), githubfs.WithRepository(repo.GetOwner().GetLogin(), repo.GetName()))

		const defaultConfigPath = ".github/octoslash"

		_, err := fs.Stat(githubFS, defaultConfigPath)
		if errors.Is(err, fs.ErrNotExist) {
			return nil, nil
		} else if err != nil {
			return nil, fmt.Errorf("opening octoslash config from GitHub Actions: %w", err)
		}

		return fs.Sub(githubFS, defaultConfigPath)
	}
}
